

# This file was *autogenerated* from the file bls12381.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xd201000000010000 = Integer(0xd201000000010000); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_13 = Integer(13); _sage_const_9 = Integer(9); _sage_const_12 = Integer(12); _sage_const_0 = Integer(0)
z  = -_sage_const_0xd201000000010000 
p  = ZZ(z + ((z - _sage_const_1 )**_sage_const_2 ) * (z**_sage_const_4  - z**_sage_const_2  + _sage_const_1 ) // _sage_const_3 )
r  = ZZ(z**_sage_const_4  - z**_sage_const_2  + _sage_const_1 )
h1 = ZZ(((z - _sage_const_1 )**_sage_const_2 ) // _sage_const_3 )
h2 = ZZ((z**_sage_const_8  - _sage_const_4 *z**_sage_const_7  + _sage_const_5 *z**_sage_const_6  - _sage_const_4 *z**_sage_const_4  + _sage_const_6 *z**_sage_const_3  - _sage_const_4 *z**_sage_const_2  - _sage_const_4 *z + _sage_const_13 ) // _sage_const_9 )
k = _sage_const_12 

Fp      = GF(p, proof=False)
Fr      = GF(r, proof=False)
R = PolynomialRing(Fp, names=('x',)); (x,) = R._first_ngens(1)
Fp2 = Fp.extension(x**_sage_const_2  + _sage_const_1 , names=('u',)); (u,) = Fp2._first_ngens(1)

Fp12 = GF(p**_sage_const_12 , modulus=x**_sage_const_12  - _sage_const_2 *x**_sage_const_6  + _sage_const_2 , names=('w',)); (w,) = Fp12._first_ngens(1)
i = sqrt(Fp12(-_sage_const_1 ))

E1 = EllipticCurve(Fp,  [_sage_const_0 , _sage_const_4 ])
E2 = EllipticCurve(Fp2, [_sage_const_0 , _sage_const_4 *u + _sage_const_4 ])

t = p + _sage_const_1  - E1.order()

_E1p = EllipticCurve(Fp12, [_sage_const_0 , _sage_const_4 ])
_E2p = EllipticCurve(Fp12, [_sage_const_0 , _sage_const_4 *i + _sage_const_4 ])

phi = _E2p.isomorphism_to(_E1p)

def coerce_Fp2_to_Fp12(e):
    ret = Fp12(_sage_const_0 )
    for exp, coeff in enumerate(e.list()):
        ret += coeff * i ** exp
    return ret

def compute_pairing(P1, P2):
    P1p = _E1p(P1.xy())
    x2 = coerce_Fp2_to_Fp12(P2.xy()[_sage_const_0 ])
    y2 = coerce_Fp2_to_Fp12(P2.xy()[_sage_const_1 ])
    P2p = _E2p(x2, y2)
    return P1p.ate_pairing(phi(P2p), r, k, t, p)

